{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotor1L = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nmotor2L = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nmotor3L = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)\nmotor1R = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nmotor2R = Motor(Ports.PORT12, GearSetting.RATIO_6_1, False)\nmotor3R = Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\nsol_a = DigitalOut(brain.three_wire_port.a)\narmMotor = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L, motor3L)\nrightMotors = (motor1R, motor2R, motor3R)\n\nleftMotor = 1\nrightMotor = 1\n\ntempL = None\ntempR = None\n\nbuttonX = False\n\n#Paste recorded input here:\nRECORDED_INPUT = \"0&0@4230X|0&0@4490X|0&0@4790X|0&0@5090X|0&0@5400X|0&0@5700X|0&0@6980X|0&0@7240X|0&0@7540X|0&0@7840X|0&0@8130X|0&0@8470X|\"\n\nrecordInput = False\nexecuteRecordedInput = False\n\narmMotorState = 0\nprevArmMotorState = 99\n\ndef move(l, r, a):\n    \n    if(l > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(l, PERCENT)\n\n    elif(l < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(l, PERCENT)\n    else:\n        for motor in leftMotors:\n            motor.stop()\n    \n    if(r > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(r, PERCENT)\n    elif(r < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(r, PERCENT)\n    else:\n        for motor in rightMotors:\n            motor.stop()\n    \n    if(a > 0):\n        armMotor.spin(FORWARD)\n        armMotor.set_velocity(100, PERCENT)\n    elif(a < 0):\n        armMotor.spin(REVERSE)\n        armMotor.set_velocity(-100, PERCENT)\n    else:\n        armMotor.stop()\n    \n\ndef somethingChanged():\n\n    if(((leftMotor == tempL) and (rightMotor == tempR))):\n        return False\n    \n    if(prevArmMotorState == armMotorState):\n        return False\n    \n    return True\n\ndef record(button):\n    print(str(leftMotor) + \"&\" + str(rightMotor) + \"@\" + str(brain.timer.time()) + button + \"|\", end=\"\")\n\ndef parseInput():\n    startIndex = 0\n    startTime = brain.timer.time(MSEC)\n    localButtonX = False\n    \n    while(startIndex < len(RECORDED_INPUT)):\n\n        totalMove = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        andIndex = totalMove.index(\"&\")\n        leftMove = int(totalMove[0 : andIndex])\n        atIndex = totalMove.index(\"@\")\n        rightMove = int(totalMove[(andIndex + 1) : atIndex])\n        milliseconds = int(totalMove[(atIndex + 1) : len(totalMove) - 1])\n        button = totalMove[len(totalMove) - 1]\n        startIndex +=  (len(totalMove) + 1)\n        \n        while(True):\n            if(milliseconds == (brain.timer.time(MSEC) - startTime)):\n                \n                if(button == \"r\"):\n                    move(leftMove, rightMove, 1)\n                elif(button == \"l\"):\n                    move(leftMove, rightMove, -1)\n                else:\n                    move(leftMove, rightMove, 0)\n                \n                if(button == \"X\"):\n                    localButtonX = not localButtonX\n                    sol_a.set(buttonX)\n                    \n                \n                #print(\"L: \" + str(leftMove) + \" R: \" + str(rightMove) + \" button: \" + button)\n                break\n            else:\n                wait(1, MSEC)\n\n\n#Main\nif(executeRecordedInput):\n        parseInput()\nelse:\n    \n    while(True):   \n        leftMotor = controller_1.axis3.position()\n        rightMotor = controller_1.axis2.position()\n        \n        if(controller_1.buttonUp.pressing()):\n                \n                recordInput = not recordInput\n                \n                if(recordInput):\n                    controller_1.screen.print(\"RECORDING\")\n                else:\n                    controller_1.screen.clear_screen()\n                wait(200, MSEC)\n\n        if(controller_1.buttonDown.pressing()):\n            \n            executeRecordedInput = not executeRecordedInput\n            \n            if(executeRecordedInput):\n                controller_1.screen.print(\"EXECUTING\")\n                parseInput()\n            else:\n                controller_1.screen.clear_screen()\n                wait(200, MSEC)\n                \n        if(controller_1.buttonX.pressing()):\n            \n            buttonX = not buttonX\n            sol_a.set(buttonX)\n\n            if(recordInput):\n                record(\"X\")\n            wait(200, MSEC)\n\n        if(controller_1.buttonR1.pressing()):\n            armMotorState = 1\n            prevArmMotorState = armMotorState\n            if(recordInput):\n                record(\"r\")\n        elif(controller_1.buttonL1.pressing()):\n            armMotorState = -1\n            prevArmMotorState = armMotorState\n            if(recordInput):\n                record(\"l\")\n        else:\n            armMotorState = 0\n            prevArmMotorState = armMotorState\n            if(recordInput):\n                record(\"-\")\n\n       \n        if(somethingChanged() and not executeRecordedInput):\n            \n            move(leftMotor, rightMotor, armMotorState)\n            #print(\"L: \" + str(leftMotor) + \" R: \" + str(rightMotor))\n            tempL = leftMotor\n            tempR = rightMotor\n            \n            if(recordInput):\n                record(\"-\")\n            \n        wait(10, MSEC)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"motor1L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"motor2L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"motor3L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[11],"name":"motor1R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[12],"name":"motor2R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[13],"name":"motor3R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"sol_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[5],"name":"armMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}