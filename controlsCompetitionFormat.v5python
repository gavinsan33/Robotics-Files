{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L, motor3L)\nrightMotors = (motor1R, motor2R, motor3R)\n\nleftMotor = 1\nrightMotor = 1\n\ntempL = None\ntempR = None\n\nbuttonX = False\n\ndef pushButton(button):\n    if(button != \"X\"):\n        return\n    global buttonX\n    buttonX = not buttonX\n    sol_a.set(buttonX)\n\ndef move(l, r):\n    \n    if(l > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(l, PERCENT)\n\n    elif(l < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(l, PERCENT)\n    else:\n        for motor in leftMotors:\n            motor.stop()\n    \n    if(r > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(r, PERCENT)\n    elif(r < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(r, PERCENT)\n    else:\n        for motor in rightMotors:\n            motor.stop()\n    \ndef somethingChanged():\n    \n    if(((leftMotor == tempL) and (rightMotor == tempR ))):\n        return False\n    \n    return True\n    \n\n#######################################\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n#########################################\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\n    #Paste recorded input here:\n    RECORDED_INPUT = \"0&0@4230X|0&0@4490X|0&0@4790X|0&0@5090X|0&0@5400X|0&0@5700X|0&0@6980X|0&0@7240X|0&0@7540X|0&0@7840X|0&0@8130X|0&0@8470X|\"\n    ##############\n\n    startIndex = 0\n    startTime = brain.timer.time(MSEC)\n    \n    while(startIndex < len(RECORDED_INPUT)):\n\n        totalMove = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        andIndex = totalMove.index(\"&\")\n        leftMove = int(totalMove[0 : andIndex])\n        atIndex = totalMove.index(\"@\")\n        rightMove = int(totalMove[(andIndex + 1) : atIndex])\n        milliseconds = int(totalMove[(atIndex + 1) : len(totalMove) - 1])\n        button = totalMove[len(totalMove) - 1]\n        startIndex +=  (len(totalMove) + 1)\n        \n        while(True):\n            if(milliseconds == (brain.timer.time(MSEC) - startTime)):\n                move(leftMove, rightMove)\n                pushButton(button)\n                #print(\"L: \" + str(leftMove) + \" R: \" + str(rightMove) + \" button: \" + button)\n                break\n            else:\n                wait(1, MSEC)\n    \n\n##########################################   \n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    \n    while(True):   \n        leftMotor = controller_1.axis3.position()\n        rightMotor = controller_1.axis2.position()\n        \n        if(controller_1.buttonUp.pressing()):\n                \n                recordInput = not recordInput\n                if(recordInput):\n                    controller_1.screen.print(\"RECORDING\")\n                else:\n                    controller_1.screen.clear_screen()\n                wait(200, MSEC)\n\n        if(controller_1.buttonX.pressing()):\n            pushButton(\"X\")\n            if(recordInput):\n                record(\"X\")\n            wait(200, MSEC)\n\n        if(somethingChanged() and not executeRecordedInput):\n            \n            move(leftMotor, rightMotor)\n            #print(\"L: \" + str(leftMotor) + \" R: \" + str(rightMotor))\n            tempL = leftMotor\n            tempR = rightMotor\n            \n            if(recordInput):\n                record(\"\")\n            \n        wait(20, MSEC)\n\n#########################################\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}